{"version":3,"sources":["components/Location/Location.js","components/Card.js","App.js","index.js"],"names":["Location","placeholder","onChange","e","props","getLocation","className","onKeyDown","event","keyCode","getWeather","onClick","Component","moment","require","Card","this","data","temp","city","region","des","img","country","format","src","alt","App","componentDidMount","navigator","geolocation","getCurrentPosition","success","newcords","lat","coords","latitude","lon","longitude","setState","cords","fetch","state","then","Response","json","val","weatherData","current","temperature","weather_descriptions","weather_icons","location","name","console","log","catch","err","message","target","value","getWeatherByCity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAyBeA,G,4KArBH,IAAD,OACP,OACE,6BACE,2BACEC,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAO,EAAKC,MAAMC,YAAYF,IACxCG,UAAU,oCACVC,UAAW,SAACC,GAAD,OACS,KAAlBA,EAAMC,QAAiB,EAAKL,MAAMM,aAAe,MAGrD,4BACEC,QAAS,kBAAM,EAAKP,MAAMM,cAC1BJ,UAAU,qBAFZ,e,GAZeM,cCFnBC,G,MAASC,EAAQ,KACAC,E,uKACT,IAAD,EAC2CC,KAAKZ,MAAMa,KAArDC,EADD,EACCA,KAAMC,EADP,EACOA,KAAMC,EADb,EACaA,OAAQC,EADrB,EACqBA,IAAKC,EAD1B,EAC0BA,IAAKC,EAD/B,EAC+BA,QACtC,OACE,yBAAKjB,UAAU,+CACb,4BACGY,EACD,kCAFF,KAIA,2BAAIL,IAASW,OAAO,SACpB,2BAAIH,GACJ,yBAAKI,IAAKH,EAAKI,IAAI,iBACnB,4BAAKP,GACL,4BACGC,EADH,IACYG,Q,GAdcX,aCgFnBe,E,kDA3Eb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAQRwB,kBAAoB,WACdC,UAAUC,cACZD,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,IAAIC,EAAW,CACbC,IAAKF,EAAQG,OAAOC,SACpBC,IAAKL,EAAQG,OAAOG,WAEtB,EAAKC,SAAS,CAAEC,MAAOP,OAEzBQ,MAAM,oFAAD,OACiF,EAAKC,MAAMF,MAAMN,IADlG,YACyG,EAAKQ,MAAMF,MAAMH,MAE5HM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAIC,EAAc,CAChB7B,KAAM4B,EAAIE,QAAQC,YAClB5B,IAAKyB,EAAIE,QAAQE,qBAAqB,GACtC5B,IAAKwB,EAAIE,QAAQG,cAAc,GAC/BhC,KAAM2B,EAAIM,SAASC,KACnBjC,OAAQ0B,EAAIM,SAAShC,OACrBG,QAASuB,EAAIM,SAAS7B,SAExB+B,QAAQC,IAAIT,GACZ,EAAKP,SAAS,CAAEtB,KAAM8B,OAEvBS,OAAM,SAACC,GAAD,OAASA,EAAIC,aAlCP,EAsCnBrD,YAAc,SAACG,GACb,EAAK+B,SAAS,CAAEpB,KAAMX,EAAMmD,OAAOC,SAvClB,EA0CnBC,iBAAmB,WACjBpB,MAAM,oFAAD,OACiF,EAAKC,MAAMvB,OAE9FwB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAIC,EAAc,CAChB7B,KAAM4B,EAAIE,QAAQC,YAClB5B,IAAKyB,EAAIE,QAAQE,qBAAqB,GACtC5B,IAAKwB,EAAIE,QAAQG,cAAc,GAC/BhC,KAAM2B,EAAIM,SAASC,KACnBjC,OAAQ0B,EAAIM,SAAShC,OACrBG,QAASuB,EAAIM,SAAS7B,SAExB+B,QAAQC,IAAIT,GACZ,EAAKP,SAAS,CAAEtB,KAAM8B,OAEvBS,OAAM,SAACC,GAAD,OAASA,EAAIC,YAzDtB,EAAKhB,MAAQ,CACXF,MAAO,CAAEN,IAAK,UAAWG,IAAK,WAC9BpB,KAAM,GACNE,KAAM,IALS,E,qDA+DjB,OACE,6BACE,4BAAQb,UAAU,mBAAlB,eACA,kBAAC,EAAD,CACED,YAAaW,KAAKX,YAClBK,WAAYM,KAAK6C,mBAEnB,kBAAC,EAAD,CAAM5C,KAAMD,KAAK0B,MAAMzB,Y,GAvEbL,aCAlBkD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.e04641a6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"tachyons\";\r\n\r\nclass Location extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          placeholder=\"Enter your city\"\r\n          onChange={(e) => this.props.getLocation(e)}\r\n          className=\"pv1 tc mr2 shadow-4 bg-white w-40\"\r\n          onKeyDown={(event) =>\r\n            event.keyCode === 13 ? this.props.getWeather() : \"\"\r\n          }\r\n        />\r\n        <button\r\n          onClick={() => this.props.getWeather()}\r\n          className=\"grow shadow-4 pv1\"\r\n        >\r\n          search\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Location;\r\n","import React, { Component } from \"react\";\r\nvar moment = require(\"moment\");\r\nexport default class Card extends Component {\r\n  render() {\r\n    const { temp, city, region, des, img, country } = this.props.data;\r\n    return (\r\n      <div className=\"bg-white dib br3 ma5 tc bw3 grow w-50 green\">\r\n        <h1>\r\n          {temp}\r\n          <sup>o</sup>C\r\n        </h1>\r\n        <p>{moment().format(\"llll\")}</p>\r\n        <p>{des}</p>\r\n        <img src={img} alt=\"weather icon\" />\r\n        <h4>{city}</h4>\r\n        <h4>\r\n          {region},{country}\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Location from \"./components/Location/Location\";\nimport \"./App.css\";\nimport \"tachyons\";\nimport Card from \"./components/Card\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cords: { lat: 12.904759, lon: 80.089081 },\n      data: {},\n      city: \"\",\n    };\n  }\n\n  componentDidMount = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((success) => {\n        let newcords = {\n          lat: success.coords.latitude,\n          lon: success.coords.longitude,\n        };\n        this.setState({ cords: newcords });\n      });\n      fetch(\n        `//api.weatherstack.com/current?access_key=df621d13cc5f043cf29066caf9832087&query=${this.state.cords.lat},${this.state.cords.lon}`\n      )\n        .then((Response) => Response.json())\n        .then((val) => {\n          let weatherData = {\n            temp: val.current.temperature,\n            des: val.current.weather_descriptions[0],\n            img: val.current.weather_icons[0],\n            city: val.location.name,\n            region: val.location.region,\n            country: val.location.country,\n          };\n          console.log(val);\n          this.setState({ data: weatherData });\n        })\n        .catch((err) => err.message);\n    }\n  };\n\n  getLocation = (event) => {\n    this.setState({ city: event.target.value });\n  };\n\n  getWeatherByCity = () => {\n    fetch(\n      `//api.weatherstack.com/current?access_key=df621d13cc5f043cf29066caf9832087&query=${this.state.city}`\n    )\n      .then((Response) => Response.json())\n      .then((val) => {\n        let weatherData = {\n          temp: val.current.temperature,\n          des: val.current.weather_descriptions[0],\n          img: val.current.weather_icons[0],\n          city: val.location.name,\n          region: val.location.region,\n          country: val.location.country,\n        };\n        console.log(val);\n        this.setState({ data: weatherData });\n      })\n      .catch((err) => err.message);\n  };\n\n  render() {\n    return (\n      <div>\n        <header className=\"f1 white tc ma4\">Weather app</header>\n        <Location\n          getLocation={this.getLocation}\n          getWeather={this.getWeatherByCity}\n        />\n        <Card data={this.state.data} />\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}